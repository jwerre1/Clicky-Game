{"version":3,"sources":["components/CharCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["styles","width","CharCard","props","react_default","a","createElement","className","style","onClick","handleIncrement","id","src","image","alt","Wrapper","children","Navbar","message","counter","topscore","Header","Footer","App","state","characters","count","clicked","wrapperClass","_this","sort","b","Math","random","setState","includes","push","length","_this2","this","components_Navbar","components_Header","components_Wrapper","map","character","components_CharCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21c486e1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst styles = {\n    width: {\n        width: \"140px\"\n    }\n};\n\nfunction CharCard(props) {\n    return (\n        <div className=\"card\" style={styles.width}>\n\n            <span onClick={() => props.handleIncrement(props.id)}><img src={props.image} className=\"width card-img-top\" alt=\"...\" /></span>\n  \n        </div>\n    );\n}\n\nexport default CharCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"container\"><div className={props.className}>{props.children}</div></div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar sticky-top navbar-light py-3\">\n            <span className=\"nav-text brand\">\n                Clicky Game\n                </span>\n            <span className={props.message === \"You guessed correctly!\" ? \"nav-text font-italic text-success nav-message\" : (props.message === \"Game over. Click an image to start again.\" ? \"nav-text redText nav-message\" : (props.message === \"You won! Click an image to play again!\" ? \"nav-text font-weight-bolder text-warning nav-message\" : \"nav-text nav-message\"))}>\n                {props.message}\n            </span>\n            <span className=\"nav-text\">\n                Score: {props.counter} | High Score: {props.topscore}\n            </span>\n        </nav>\n\n    );\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Header() {\n    return (\n      <header className=\"header\">\n        <h1>Clicky Game!</h1>\n        <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n      </header>\n    );\n  }\n  \n  export default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n    return (\n      <footer className=\"footer\">\n        <p>Copyright Â© Jordan Werre 2019</p>\n      </footer>\n    );\n  }\n\nexport default Footer;","import React, { Component } from 'react';\n// import Counter from \"./components/Counter\";\nimport CharCard from \"./components/CharCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport './App.css';\n\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n\n  state = {\n    characters,\n    count: 0,\n    clicked: [],\n    topscore: 0,\n    message: \"Click an image to begin!\",\n    wrapperClass: \"wrapper\"\n  }\n\n  handleIncrement = (id) => {\n    function func(a, b) {\n      return 0.5 - Math.random();\n    }\n    const characters = this.state.characters.sort(func);\n    this.setState({ characters });\n\n    let clicked = this.state.clicked;\n\n    if (clicked.includes(id) === false) {\n      clicked.push(id);\n      this.setState({ count: this.state.count + 1 });\n      this.setState({ wrapperClass: \"wrapper\" });\n      this.setState({ message: \"You guessed correctly!\" });\n\n      if (this.state.count + 1 > this.state.topscore) {\n        this.setState({ topscore: this.state.count + 1 });\n      }\n    }\n\n    else {\n      this.setState({ clicked: [] });\n      this.setState({ count: 0 });\n      this.setState({ wrapperClass: \"wrapper shake\" });\n      this.setState({ message: \"Game over. Click an image to start again.\" });\n    }\n\n    if (clicked.length === 12) {\n      this.setState({ count: 0 });\n      this.setState({ clicked: [] });\n      this.setState({ wrapperClass: \"wrapper\" });\n      this.setState({ message: \"You won! Click an image to play again!\" });\n\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar \n        counter={this.state.count}\n        topscore={this.state.topscore}\n        message={this.state.message}\n        />\n\n        <Header />\n        <Wrapper\n        className={this.state.wrapperClass}\n        >\n          <div className=\"card-columns\">\n          {this.state.characters.map(character => (\n            <CharCard\n              key={character.id}\n              id={character.id}\n              image={character.image}\n              clicked={character.clicked}\n              handleIncrement={this.handleIncrement}\n            />\n          ))}\n          </div>\n        </Wrapper>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}